import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from utils import config_reader
from data import find_recipes_by_ingredients

logging.basicConfig(level=logging.INFO)

token = config_reader('Telegram', 'token')

bot = Bot(token=token)
dp = Dispatcher(bot)

main_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, selective=True).add(
    KeyboardButton("–ù–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç"),
    KeyboardButton("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
)

recipe_navigation_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton("–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ—Ü–µ–ø—Ç", callback_data='prev_recipe'),
        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back'),
        InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π —Ä–µ—Ü–µ–ø—Ç", callback_data='next_recipe'),
    ],
])

current_recipe_index = 0
found_recipes = None


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç '–ö–∞—Ä—É—Å–µ–ª—å —Ä–µ—Ü–µ–ø—Ç–æ–≤'. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É —Ç–µ–±—è –µ—Å—Ç—å. ü§ñüç≥\n\n"
                         "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=main_keyboard)


@dp.message_handler(lambda message: message.text == "–ù–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç")
async def find_recipe(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: —è–π—Ü–∞, –º—É–∫–∞, –º–æ–ª–æ–∫–æ")


@dp.message_handler(lambda message: message.text and not message.text.startswith('/'))
async def handle_ingredients(message: types.Message):
    await message.answer("–ü–æ–¥–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã –¥–ª—è –≤–∞—Å, –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ)")

    global current_recipe_index, found_recipes
    ingredients = message.text.split(', ')
    found_recipes = find_recipes_by_ingredients(ingredients)

    if found_recipes.empty:
        await message.answer("–ù–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–∏–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º.")
    else:
        current_recipe_index = 0
        await display_recipe(found_recipes.iloc[current_recipe_index], message.from_user.id)


async def display_recipe(recipe, user_id):
    
    recipe_name = recipe['recipe_name']
    ingredients = eval(recipe['ingredients'])
    formatted_ingredients = "\n".join(["- " + ingredient for ingredient in ingredients])
    source_url = recipe['source_url']
    recipe_text = f"{recipe_name}\n\n–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n{formatted_ingredients}\n\n–°—Å—ã–ª–∫–∞: {source_url}"

    await bot.send_message(user_id, recipe_text, reply_markup=recipe_navigation_keyboard)


@dp.callback_query_handler(lambda query: query.data in {'next_recipe', 'prev_recipe', 'back'})
async def handle_recipe_navigation(query: types.CallbackQuery):
    global current_recipe_index, found_recipes

    if query.data == 'next_recipe':
        current_recipe_index += 1
    elif query.data == 'prev_recipe':
        current_recipe_index -= 1

    if current_recipe_index < 0:
        current_recipe_index = 0
    elif current_recipe_index >= len(found_recipes):
        current_recipe_index = len(found_recipes) - 1

    if query.data in {'next_recipe', 'prev_recipe'}:
        await query.message.delete()
        await display_recipe(found_recipes.iloc[current_recipe_index], query.from_user.id)
    elif query.data == 'back':
        await query.message.answer("–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=main_keyboard)
        await query.message.delete()


async def main():
    await dp.start_polling()


if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
